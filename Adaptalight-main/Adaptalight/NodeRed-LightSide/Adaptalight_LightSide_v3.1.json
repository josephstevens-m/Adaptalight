[{"id":"fd4fe1fd.0da91","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"1ac7b9b.06a4346","type":"tab","label":"Flow 2","disabled":false,"info":""},{"id":"3b596eb9.421782","type":"tab","label":"Flow 3","disabled":false,"info":""},{"id":"62132c2b.33f1e4","type":"serial-port","serialport":"/dev/ttyUSB0","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"31b40f39.3e4178","type":"serial-port","serialport":"/dev/ttyACM0","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"df9d8b1b.113268","type":"mqtt-broker","name":"","broker":"192.168.0.150","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"5d5850d4.1d869","type":"influxdb","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"SpectralMmolv2","name":"","usetls":false,"tls":"","influxdbVersion":"1.x","url":"http://localhost:8086","rejectUnauthorized":true},{"id":"bf2ea444.25f708","type":"serial-port","serialport":"","serialbaud":"57600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"6cbfb297.db131c","type":"influxdb","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"comparingPAR","name":"","usetls":false,"tls":"","influxdbVersion":"1.x","url":"http://localhost:8086","rejectUnauthorized":true},{"id":"a12fda75.10f158","type":"mqtt in","z":"fd4fe1fd.0da91","name":"Apogee Sensor","topic":"dev/test","qos":"2","datatype":"auto","broker":"df9d8b1b.113268","x":80,"y":220,"wires":[["52996f99.930ff","43d58392.a21c1c"]]},{"id":"91c6b3c0.19e39","type":"function","z":"fd4fe1fd.0da91","name":"PWMAdjust","func":"obj = JSON.parse(msg.payload); //parses incoming payload to a JSON without the JSON node. \n\n//Then we use the object to assign to the variables below. \nvar mmols = obj.mmol;\n\n/*\nvar date = msg.payload.date;\nvar time = msg.payload.time;\nvar mmols = msg.payload.mmol;\n*/\n\nvar SetMmols = flow.get(\"SuperSetMmols\"); //this is the setting for the target mmols\nvar myPwm = flow.get(\"pwm\"); // This is the current setting for the pwm set inside \n\nif (mmols>SetMmols){ //if the current mmols are brighter than our setting\n    if (myPwm>=255) //Then test to make no number greater than 255 is sent\n        {\n        myPwm = 255; //If the number is larger it will send 255\n        flow.set(\"pwm\", myPwm);\n        }\n     else\n        {\n        myPwm = myPwm + 1; //if not then add one to the pwm \n        //myPwm++;\n        flow.set(\"pwm\", myPwm);\n        }\n}\n//if (mmols<SetMmols){\nelse{    \n    if (myPwm<=0)\n        {\n        myPwm = 0;\n        flow.set(\"pwm\", myPwm);\n        }\n    else{\n        myPwm = myPwm - 1;\n        //myPwm--;\n        flow.set(\"pwm\", myPwm);\n        }\n}\n\nvar newMsg = {};\nnewMsg.payload = myPwm;\n//Line below is for testing the output of the node\n//newMsg.payload = \"{\\\"pwm\\\":\"+ myPwm + \",\\\"SuperMmols\\\":\" + SetMmols + \",\\\"InMols\\\":\" + mmols +\"}\";\n\nreturn newMsg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":130,"y":780,"wires":[[]]},{"id":"32b6e116.c1312e","type":"change","z":"fd4fe1fd.0da91","name":"","rules":[{"t":"set","p":"pwm","pt":"flow","to":"127","tot":"num"},{"t":"set","p":"SuperSetMmols","pt":"flow","to":"200","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":1080,"y":80,"wires":[[]]},{"id":"80b874ef.032c78","type":"inject","z":"fd4fe1fd.0da91","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":880,"y":80,"wires":[["32b6e116.c1312e"]]},{"id":"43d58392.a21c1c","type":"debug","z":"fd4fe1fd.0da91","name":"mmols","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":290,"y":280,"wires":[]},{"id":"3ccde7e.4e55b18","type":"function","z":"fd4fe1fd.0da91","name":"FastPWM-v1","func":"obj = JSON.parse(msg.payload); //parses incoming payload to a JSON without the JSON node. \n  \n//Then we use the object to assign to the variables below. \nvar mmols = obj.mmol;\n\nvar SetMmols = flow.get(\"SuperSetMmols2\"); //this is the setting for the target mmols\nvar myPwm = flow.get(\"pwm2\"); // This is the current setting for the pwm set inside \n\nif (mmols>SetMmols)\n{ //if the current mmols are brighter than our setting\n    differingMmols = mmols - SetMmols;\n    if (myPwm<0) //if the number is less than 0 it will send 0\n        {\n        myPwm = 0; //If the number is larger it will send 0\n        flow.set(\"pwm2\", myPwm);\n        }\n    else if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n         myPwm = myPwm + 10;\n         flow.set(\"pwm2\", myPwm);\n        }\n    else //This is the normal minor adjustments. \n        {\n        myPwm = myPwm + 1; //if not then add one to the pwm \n        //myPwm++;\n        //flow.set(\"pwm\", myPwm);\n        }\n    flow.set(\"pwm2\", myPwm);\n}\n//if (mmols<SetMmols){\nelse{  // if the current mmols are dimmer than the setting\n    differingMmols = SetMmols - mmols;\n    if (myPwm>255) //Then test to make no number greater than 255 is sent\n        {\n        myPwm = 255;\n        flow.set(\"pwm2\", myPwm);\n        }\n    else if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n         myPwm = myPwm -10;\n         flow.set(\"pwm2\", myPwm);\n        }\n    else{\n        myPwm = myPwm - 1;\n        //myPwm--;\n        flow.set(\"pwm2\", myPwm);\n        }\n    flow.set(\"pwm2\", myPwm);\n}\n\nvar newMsg = {};\nnewMsg.payload = myPwm;\n//Line below is for testing the output of the node\n//newMsg.payload = \"{\\\"pwm\\\":\"+ myPwm + \",\\\"SuperMmols\\\":\" + SetMmols + \",\\\"InMols\\\":\" + mmols +\"}\";\n\nreturn newMsg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":130,"y":860,"wires":[[]]},{"id":"25a2a359.53fb8c","type":"debug","z":"fd4fe1fd.0da91","name":"Updated PWM","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":900,"y":260,"wires":[]},{"id":"5aeb022d.dd0eac","type":"function","z":"fd4fe1fd.0da91","name":"FastPWM-v0","func":"obj = JSON.parse(msg.payload); //parses incoming payload to a JSON without the JSON node. \nfunction round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n//Then we use the object to assign to the variables below. \nvar mmols = obj.mmol;\n\n/*\nvar date = msg.payload.date;\nvar time = msg.payload.time;\nvar mmols = msg.payload.mmol;\n*/\nlet differingMmols=0;\nlet tempPwmAdjust=0;\nlet roundTempPwmAdjust=0;\nvar SetMmols = flow.get(\"SuperSetMmols2\"); //this is the setting for the target mmols\nvar myPwm = flow.get(\"pwm2\"); // This is the current setting for the pwm set inside \n\nif (mmols>SetMmols){ //if the current mmols are brighter than our setting\n    differingMmols = mmols - SetMmols;\n    if (myPwm>=0) //Then test to make no number greater than 255 is sent\n        {\n        myPwm = 0; //If the number is larger it will send 255\n        flow.set(\"pwm2\", myPwm);\n        }\n    else if(differingMmols>10) //this will adjust faster\n        {// It will take every 1 pwm = 3 mmol and give a quick  adjust\n         //tempPwmAdjust = Math.round(differingMmols * 3); //this formula is off \n         //roundTempPwmAdjust = Math.round(tempPwmAdjust);\n         myPwm = myPwm +10;\n         flow.set(\"pwm2\", myPwm);\n        }\n    else //This is the normal minor adjustments. \n        {\n        myPwm = myPwm + 1; //if not then add one to the pwm \n        //myPwm++;\n        //flow.set(\"pwm\", myPwm);\n        }\n    flow.set(\"pwm2\", myPwm);\n}\n//if (mmols<SetMmols){\nelse{  // if the current mmols are dimmer than the setting\n    differingMmols = SetMmols - mmols;\n    if (myPwm<=255) //if the number is less than 0 it will send 0\n        {\n        myPwm = 255;\n       // flow.set(\"pwm\", myPwm);\n        }\n    else if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n         myPwm = myPwm -10;\n         flow.set(\"pwm2\", myPwm);\n        }\n    else{\n        myPwm = myPwm - 1;\n        //myPwm--;\n        flow.set(\"pwm2\", myPwm);\n        }\n    flow.set(\"pwm2\", myPwm);\n}\n\nvar newMsg = {};\nnewMsg.payload = myPwm;\n//Line below is for testing the output of the node\n//newMsg.payload = \"{\\\"pwm\\\":\"+ myPwm + \",\\\"SuperMmols\\\":\" + SetMmols + \",\\\"InMols\\\":\" + mmols +\"}\";\n\nreturn newMsg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":130,"y":820,"wires":[[]]},{"id":"23493402.bbfc6c","type":"function","z":"fd4fe1fd.0da91","name":"FastPWM-v2.1","func":"var obj = JSON.parse(msg.payload); //parses incoming payload to a JSON without the JSON node.\n\n//Then we use the object to assign to the variables below.\nvar mmols = obj.mmol;\n\nvar SetMmols = flow.get(\"SuperSetMmols\"); //this is the setting for the target mmols\nvar myPwm = flow.get(\"pwm\"); // This is the current setting for the pwm set inside\nlet differingMmols = 0;\n\nif (mmols>SetMmols)\n{ //if the current mmols are brighter than our setting\n    differingMmols = mmols - SetMmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm + Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else //This is the normal minor adjustments.\n        {\n          myPwm = myPwm + 1; //if not then add one to the pwm\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm>=255) //Then test to make no number greater than 255 is sent\n        {\n          myPwm = 255; //If the number is larger it will send 255\n          flow.set(\"pwm\", myPwm);\n        }\n}\n//if (mmols<SetMmols){\nelse{  // if the current mmols are dimmer than the setting\n    differingMmols = SetMmols - mmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm - Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else{\n          myPwm = myPwm - 1;\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm<=0)\n        {\n          myPwm = 0;\n          flow.set(\"pwm\", myPwm);\n        }\n}\n\nvar newMsg = {};\n//newMsg.payload = myPwm;\nnewMsg.payload = {pwm: myPwm};\n//Line below is for testing the output of the node\n//newMsg.payload = \"{\\\"pwm\\\":\"+ myPwm + \",\\\"SuperMmols\\\":\" + SetMmols + \",\\\"InMols\\\":\" + mmols +\"}\";\n\nreturn newMsg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":140,"y":560,"wires":[[]]},{"id":"cbca5238.867db","type":"mqtt in","z":"fd4fe1fd.0da91","name":"","topic":"Altogether","qos":"2","datatype":"auto","broker":"df9d8b1b.113268","x":200,"y":360,"wires":[["260ab04d.41541"]]},{"id":"d89f6359.6f3f1","type":"json","z":"fd4fe1fd.0da91","name":"","property":"payload","action":"","pretty":false,"x":550,"y":800,"wires":[[]]},{"id":"426f7d2b.4ac6d4","type":"mqtt in","z":"fd4fe1fd.0da91","name":"","topic":"AdafruitRaw","qos":"2","datatype":"auto","broker":"df9d8b1b.113268","x":410,"y":800,"wires":[["d89f6359.6f3f1"]]},{"id":"260ab04d.41541","type":"json","z":"fd4fe1fd.0da91","name":"","property":"payload","action":"","pretty":false,"x":390,"y":360,"wires":[["57612afa.5b4584","a62c63e2.3ec38"]]},{"id":"a8e90827.647298","type":"function","z":"fd4fe1fd.0da91","name":"FastPWM-v2","func":"obj = JSON.parse(msg.payload); //parses incoming payload to a JSON without the JSON node.\n\n//Then we use the object to assign to the variables below.\nvar mmols = obj.mmol;\n\nvar SetMmols = flow.get(\"SuperSetMmols\"); //this is the setting for the target mmols\nvar myPwm = flow.get(\"pwm\"); // This is the current setting for the pwm set inside\nlet differingMmols = 0;\n\nif (mmols>SetMmols)\n{ //if the current mmols are brighter than our setting\n    differingMmols = mmols - SetMmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm + Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else //This is the normal minor adjustments.\n        {\n          myPwm = myPwm + 1; //if not then add one to the pwm\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm>=255) //Then test to make no number greater than 255 is sent\n        {\n          myPwm = 255; //If the number is larger it will send 255\n          flow.set(\"pwm\", myPwm);\n        }\n}\n//if (mmols<SetMmols){\nelse{  // if the current mmols are dimmer than the setting\n    differingMmols = SetMmols - mmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm - Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else{\n          myPwm = myPwm - 1;\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm<=0)\n        {\n          myPwm = 0;\n          flow.set(\"pwm\", myPwm);\n        }\n}\n\nvar newMsg = {};\nnewMsg.payload = myPwm;\n//Line below is for testing the output of the node\n//newMsg.payload = \"{\\\"pwm\\\":\"+ myPwm + \",\\\"SuperMmols\\\":\" + SetMmols + \",\\\"InMols\\\":\" + mmols +\"}\";\n\nreturn newMsg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":130,"y":740,"wires":[[]]},{"id":"676edca3.46b0a4","type":"influxdb out","z":"fd4fe1fd.0da91","influxdb":"5d5850d4.1d869","name":"","measurement":"pwm","precision":"","retentionPolicy":"","database":"database","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"","org":"organisation","bucket":"bucket","x":220,"y":960,"wires":[]},{"id":"97e3e1d5.58ca4","type":"function","z":"fd4fe1fd.0da91","name":"RGBWToMmol-70K","func":"  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n  \n  var Red = msg.payload.Red * 1;\n  var Green = msg.payload.Green * 1;\n  var Blue = msg.payload.Blue * 1;\n  var White = msg.payload.White * 1;\n\n\n//From 10000 observations mostly Dark\nvar alpha = -1.440;\nvar redCo = 0.003;\nvar greenCo = -0.005;\nvar blueCo = 0.005;\nvar whiteCo = 0.002;\n  \n  var newMsg ={}; \nvar convertMmol = alpha-Red*redCo+Green*greenCo+Blue*blueCo+White*whiteCo;\n // var convertMmol = alpha-(Red*redCo)+(Green*greenCo)+(Blue*blueCo)+(White*whiteCo);\n  var roundMmol = round(convertMmol, 1);\n  \n  newMsg.topic = \"WRGBMmol70k\"                                                                                \n  newMsg.payload = {WRGBMmol70k: roundMmol};\n  \n  //newMsg.payload = \"{\\\"WRGBMmol70k\\\":\"+ roundMmol + \"}\";\n  return newMsg;   \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":770,"y":800,"wires":[[]]},{"id":"3e1dcb4b.0f2d54","type":"serial in","z":"fd4fe1fd.0da91","name":"LightSide AS7265x","serial":"62132c2b.33f1e4","x":90,"y":160,"wires":[["1b14923a.fceb8e"]]},{"id":"a62c63e2.3ec38","type":"debug","z":"fd4fe1fd.0da91","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":550,"y":460,"wires":[]},{"id":"1b14923a.fceb8e","type":"json","z":"fd4fe1fd.0da91","name":"","property":"payload","action":"","pretty":false,"x":250,"y":160,"wires":[["16403b4.32247c5","5069e41f.5d455c"]]},{"id":"b150696f.86ce78","type":"comment","z":"fd4fe1fd.0da91","name":"Dimmer Algorithms","info":"","x":150,"y":700,"wires":[]},{"id":"707b417e.81ece","type":"comment","z":"fd4fe1fd.0da91","name":"MQTT TCS34725 Inputs from Main System","info":"These are the inputs that were coming for the TCS34725...","x":500,"y":700,"wires":[]},{"id":"36d91230.e7628e","type":"comment","z":"fd4fe1fd.0da91","name":"LightSide AS7265x","info":"This is the connection to the sensor that will only have the light and the mmols ","x":90,"y":120,"wires":[]},{"id":"52996f99.930ff","type":"json","z":"fd4fe1fd.0da91","name":"","property":"payload","action":"","pretty":false,"x":250,"y":220,"wires":[["16403b4.32247c5"]]},{"id":"16403b4.32247c5","type":"join","z":"fd4fe1fd.0da91","name":"","mode":"custom","build":"merged","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"21","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":370,"y":187,"wires":[["64f1eacf.db4f94","8307563b.791a78"]]},{"id":"9a6e6425.2bafc8","type":"influxdb out","z":"fd4fe1fd.0da91","influxdb":"5d5850d4.1d869","name":"Light Side","measurement":"LightSideSpectralMmol","precision":"","retentionPolicy":"","database":"database","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"","org":"organisation","bucket":"bucket","x":880,"y":200,"wires":[]},{"id":"64f1eacf.db4f94","type":"function","z":"fd4fe1fd.0da91","name":"SpectralAsString","func":"let $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\nlet $730nm=msg.payload[\"730nm\"];\nlet $760nm=msg.payload[\"760nm\"];\nlet $810nm=msg.payload[\"810nm\"];\nlet $860nm=msg.payload[\"860nm\"];\nlet $900nm=msg.payload[\"900nm\"];\nlet $940nm=msg.payload[\"940nm\"];\nlet $date=msg.payload[\"date\"];\nlet $time=msg.payload[\"time\"];\nlet $mmol=msg.payload[\"mmol\"];\n\n\n\n\nvar newMsg={};\nnewMsg.payload = {\n                nm410:$410nm,\n                nm435:$435nm,\n                nm460:$460nm,\n                nm485:$485nm,\n                nm510:$510nm,\n                nm535:$535nm,\n                nm560:$560nm,\n                nm585:$585nm,\n                nm610:$610nm,\n                nm645:$645nm,\n                nm680:$680nm,\n                nm705:$705nm,\n                nm730:$730nm,\n                nm760:$760nm,\n                nm810:$810nm,\n                nm860:$860nm,\n                nm900:$900nm,\n                nm940:$940nm,\n                mmol:$mmol,\n                //date: $date,\n                //time: $time\n                    };\n\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":630,"y":160,"wires":[[]]},{"id":"8307563b.791a78","type":"function","z":"fd4fe1fd.0da91","name":"SpectralFloatConvert","func":"let $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\nlet $730nm=msg.payload[\"730nm\"];\nlet $760nm=msg.payload[\"760nm\"];\nlet $810nm=msg.payload[\"810nm\"];\nlet $860nm=msg.payload[\"860nm\"];\nlet $900nm=msg.payload[\"900nm\"];\nlet $940nm=msg.payload[\"940nm\"];\nlet $date=msg.payload[\"date\"];\nlet $time=msg.payload[\"time\"];\nlet $mmol=msg.payload[\"mmol\"];\n\n$410nm=$410nm*1;\n$435nm=$435nm*1;\n$460nm=$460nm*1;\n$485nm=$485nm*1;\n$510nm=$510nm*1;\n$535nm=$535nm*1;\n$560nm=$560nm*1;\n$585nm=$585nm*1;\n$610nm=$610nm*1;\n$645nm=$645nm*1;\n$680nm=$680nm*1;\n$705nm=$705nm*1;\n$730nm=$730nm*1;\n$760nm=$760nm*1;\n$810nm=$810nm*1;\n$860nm=$860nm*1;\n$900nm=$900nm*1;\n$940nm=$940nm*1;\n\n\n\nvar newMsg={};\nnewMsg.payload = {\n                nm410:$410nm,\n                nm435:$435nm,\n                nm460:$460nm,\n                nm485:$485nm,\n                nm510:$510nm,\n                nm535:$535nm,\n                nm560:$560nm,\n                nm585:$585nm,\n                nm610:$610nm,\n                nm645:$645nm,\n                nm680:$680nm,\n                nm705:$705nm,\n                nm730:$730nm,\n                nm760:$760nm,\n                nm810:$810nm,\n                nm860:$860nm,\n                nm900:$900nm,\n                nm940:$940nm,\n                mmol:$mmol,\n                //date: $date,\n                //time: $time\n                    };\n\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":640,"y":200,"wires":[["25a2a359.53fb8c","9a6e6425.2bafc8"]]},{"id":"57612afa.5b4584","type":"function","z":"fd4fe1fd.0da91","name":"filterOutDateTime","func":"let $date=msg.payload[\"date\"];\nlet $time=msg.payload[\"time\"];\nlet $PWM=msg.payload[\"PWM\"];\nlet $predictedMmol=msg.payload[\"predictedMmol\"];\nlet $mmol=msg.payload[\"mmol\"];\n\n\n\nvar newMsg={};\nnewMsg.payload = {\n                PWM:$PWM,\n                predictedMmol:$predictedMmol,\n                mmol:$mmol\n                //date: $date,\n                //time: $time\n                    };\n\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":590,"y":360,"wires":[[]]},{"id":"5069e41f.5d455c","type":"mqtt out","z":"fd4fe1fd.0da91","name":"","topic":"SparkSpec","qos":"","retain":"","broker":"df9d8b1b.113268","x":520,"y":100,"wires":[]},{"id":"1ed882b7.57603d","type":"comment","z":"fd4fe1fd.0da91","name":"Old Databased Connections","info":"","x":180,"y":920,"wires":[]}]