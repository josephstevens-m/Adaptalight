[{"id":"5464091f.991b38","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"5203fa5f.0fe304","type":"tab","label":"Flow 2","disabled":false,"info":""},{"id":"31793bcb.c20d44","type":"tab","label":"Flow 3","disabled":false,"info":""},{"id":"8ff68355.e84b3","type":"serial-port","serialport":"/dev/ttyS0","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"a0e240f7.406c6","type":"serial-port","serialport":"/dev/ttyACM0","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"ddfcdbe5.f222e8","type":"sqlitedb","db":"/home/osboxes/MyDB/TestNode","mode":"RWC"},{"id":"32c79d39.858102","type":"mqtt-broker","name":"QuantumSensor","broker":"192.168.0.150","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"8c9d914c.5ef51","type":"serial-port","serialport":"/dev/ttyUSB1","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"7f74a926.884158","type":"MySQLdatabase","name":"","host":"127.0.0.1","port":"3306","db":"sensordb","tz":"","charset":"UTF8"},{"id":"25c3d116.f33d46","type":"ioplugin","name":"","username":"","password":"","boardType":"raspi-io","serialportName":"","connectionType":"local","mqttServer":"","pubTopic":"","subTopic":"","tcpHost":"","tcpPort":"","sparkId":"","sparkToken":"","beanId":"","impId":"","uuid":"","token":"","sendUuid":"","samplingInterval":"500"},{"id":"f3e990fa.e34df","type":"mqtt-broker","name":"","broker":"","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"97a92bcb.f6c9a8","type":"influxdb","hostname":"192.168.0.151","port":"8086","protocol":"http","database":"SpectralMmolv2","name":"","usetls":false,"tls":"","influxdbVersion":"1.x","url":"http://localhost:8086","rejectUnauthorized":true},{"id":"2cab7ca4.3f0694","type":"serial in","z":"5464091f.991b38","name":"Arduino1","serial":"a0e240f7.406c6","x":340,"y":2120,"wires":[["77faa303.5e450c"]]},{"id":"2acc52f0.93f35e","type":"comment","z":"5464091f.991b38","name":"how to connect arduino","info":"you have to give chmod 666 to /dev/USB0 to connect serial \n\nuse \nlsusb\n\nand you can also use this too\ndmesg | grep tty\n\n\n","x":380,"y":1860,"wires":[]},{"id":"4d1f5bed.ca0464","type":"json","z":"5464091f.991b38","name":"","property":"payload","action":"","pretty":false,"x":510,"y":2120,"wires":[["88281cff.0da27","516ca82b.6dacd8","e65fbbe7.882e98","97e3e1d5.58ca4","e2ab87cf.1f61b8"]]},{"id":"e9ea628e.6acaf","type":"function","z":"5464091f.991b38","name":"InsertLightsensor","func":"\nfunction appendLeadingZeroes(n){\n  if(n <= 9){\n    return \"0\" + n;\n  }\n  return n;\n}\n\nlet current_datetime = new Date();\nlet nDate = current_datetime.getFullYear() + \"-\" + appendLeadingZeroes(current_datetime.getMonth() + 1) + \"-\" + appendLeadingZeroes(current_datetime.getDate());\nlet nTime = appendLeadingZeroes(current_datetime.getHours()) + \":\" + appendLeadingZeroes(current_datetime.getMinutes()) + \":\" + appendLeadingZeroes(current_datetime.getSeconds());\nlet stringDate = \"'\"+nDate+\"'\";\nlet stringTime = \"'\"+nTime+\"'\";\n\n\n\nvar ColorTemp = msg.payload.ColorTemp;\nvar Lux = msg.payload.Lux;\nvar Red = msg.payload.Red;\nvar Green = msg.payload.Green;\nvar Blue = msg.payload.Blue;\nvar White = msg.payload.White;\n\n\nvar newMsg ={};\nnewMsg.topic = \"INSERT INTO lightsensor(Date,Time,ColorTemp,Lux,Red,Green,Blue,White) VALUES(\"+ stringDate + \", \" + stringTime + \", \" + ColorTemp + \", \" + Lux + \", \" + Red + \", \" + Green +\", \" + Blue + \", \"+ White + \")\";\n//newMsg.topic= \"INSERT INTO \\`lightsensor\\` (\\`lightsensorID\\`, \\`Date\\`, \\`Time\\`, \\`ColorTemp\\`, \\`Lux\\`, \\`Red\\`, \\`Green\\`, \\`Blue\\`, \\`White\\`) VALUES (NULL, \\'2020-10-01\\', \\'11:33:30\\', \\'52\\', \\'25\\', \\'52\\', \\'25\\', \\'52\\', \\'25\\');\";\n \nreturn newMsg;   \n    \n    \n    \n//INSERT INTO lightsensor(DateTime,ColorTemp,Lux,Red,Green,Blue,White)VALUES(2020-01-01,00:01:01,60,50,40,30,20,10)\n//\"INSERT INTO lightsensor(Date,Time,ColorTemp,Lux,Red,Green,Blue,White) VALUES(\"+ stringDate + \", \" + stringTime \", \" + ColorTemp + \", \" + Lux + \", \" + Red + \", \" + Green +\", \" + Blue + \", \"+ White + \")\" }","outputs":1,"noerr":0,"initialize":"","finalize":"","x":370,"y":1600,"wires":[[]]},{"id":"8a0cdd8c.33f58","type":"mqtt in","z":"5464091f.991b38","name":"Apogee","topic":"dev/test","qos":"2","datatype":"auto","broker":"32c79d39.858102","x":70,"y":680,"wires":[["113d8845.4276c"]]},{"id":"113d8845.4276c","type":"json","z":"5464091f.991b38","name":"","property":"payload","action":"","pretty":false,"x":270,"y":680,"wires":[["c83c83ae.364c5","fb0524c1.4c3168","277e1e31.1349d2"]]},{"id":"1c95c2d1.8007fd","type":"function","z":"5464091f.991b38","name":"InsertQuantumSensor","func":"var date = msg.payload.date;\nvar time = msg.payload.time;\nvar mmols = msg.payload.mmol;\n\nvar newMsg = {};\n\nnewMsg.topic =  \"INSERT INTO qsensor(date,time,mmols) VALUES(\\'\"+ date + \" \\', \\' \" + time + \"\\', \\'\" + mmols + \"\\')\";\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":380,"y":1640,"wires":[[]]},{"id":"c83c83ae.364c5","type":"join","z":"5464091f.991b38","name":"","mode":"custom","build":"merged","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"21","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":630,"y":680,"wires":[["de1cc8d4.e3cba8"]]},{"id":"77faa303.5e450c","type":"link out","z":"5464091f.991b38","name":"Flow2","links":["2374b919.5f97b6","dfd031a1.63a6"],"x":355,"y":2180,"wires":[]},{"id":"17a87ea1.f1a911","type":"comment","z":"5464091f.991b38","name":"SQL Insert statements","info":"","x":380,"y":1560,"wires":[]},{"id":"f155a9ef.4c24a8","type":"rpi-gpio out","z":"5203fa5f.0fe304","name":"HydroPump","pin":"12","set":"","level":"0","freq":"","out":"out","x":390,"y":60,"wires":[]},{"id":"ce574173.ca25c8","type":"inject","z":"5203fa5f.0fe304","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":130,"y":220,"wires":[["f155a9ef.4c24a8"]]},{"id":"61de05b.b1c26fc","type":"inject","z":"5203fa5f.0fe304","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"0","payloadType":"num","x":130,"y":300,"wires":[["b9807b6f.36645"]]},{"id":"b9807b6f.36645","type":"rpi-gpio out","z":"5203fa5f.0fe304","name":"Water Pump","pin":"11","set":"","level":"0","freq":"","out":"out","x":370,"y":320,"wires":[]},{"id":"4ca0a261.db932c","type":"debug","z":"5464091f.991b38","name":"Quantum","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":900,"y":560,"wires":[]},{"id":"88281cff.0da27","type":"function","z":"5464091f.991b38","name":"RGBWToMmol","func":"  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n  \n  var Red = msg.payload.Red * 1;\n  var Green = msg.payload.Green * 1;\n  var Blue = msg.payload.Blue * 1;\n  var White = msg.payload.White * 1;\n\n//From 100 Observations all 2 for every 10 mmols  \n  var alpha = 9.180;\n  var redCo = -0.004;\n  var greenCo = 0.002;\n  var blueCo = 0.006;\n  var whiteCo = 0.000;\n \n \n \n//From 10000 observations mostly Dark\n//var redCo = -0.0015;\n//var greenCo = 0.0018;\n//var blueCo = 0.0043;\n//var whiteCo = 0.0005;\n  \n  var newMsg ={}; \n  var convertMmol = alpha-Red*redCo+Green*greenCo+Blue*blueCo+White*whiteCo;\n  var roundMmol = round(convertMmol, 1);\n  \n  newMsg.topic = \"WRGBMmol\"                                                                                \n  newMsg.payload = \"{\\\"WRGBMmol\\\":\"+ roundMmol + \"}\";\n  return newMsg;   \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":720,"y":2140,"wires":[["df94400.1a4bec"]]},{"id":"df94400.1a4bec","type":"json","z":"5464091f.991b38","name":"","property":"payload","action":"","pretty":false,"x":1010,"y":2080,"wires":[[]]},{"id":"d3dd5938.063728","type":"function","z":"5464091f.991b38","name":"InsertCalibrateTable","func":"\n  var date = msg.payload.date;\n  var time = msg.payload.time;\n  var mmols = msg.payload.mmol;\n  var WRGBMmols = msg.payload.WRGBMmol;\n  var RGBMmols = msg.payload.RGBMmol;\n\n\n                                                                                             \n\n  var newMsg ={};                                                                              \n  newMsg.topic = \"INSERT INTO calibrateTable(Date,Time,mmols,WRGBMmols,RGBMmols)  VALUES(\\'\"+ date + \" \\', \\' \" + time + \"\\', \\'\" + mmols + \"\\', \" + WRGBMmols + \", \" + RGBMmols + \")\";\n  \n  return newMsg; ","outputs":1,"noerr":0,"initialize":"","finalize":"","x":380,"y":1800,"wires":[[]]},{"id":"516ca82b.6dacd8","type":"function","z":"5464091f.991b38","name":"RGBMmols","func":"  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n  \n  var Red = msg.payload.Red * 1;\n  var Green = msg.payload.Green * 1;\n  var Blue = msg.payload.Blue * 1;\n // var White = msg.payload.White * 1;\n  \n  //Done with 100 observations\n  var alpha = 13.030;\n  var redCo = -0.005;\n  var greenCo = -0.002;\n  var blueCo = 0.012;\n  //var whiteCo = 0.0005;\n  \n  var newMsg ={}; \n  var convertMmol = alpha-Red*redCo+Green*greenCo+Blue*blueCo;\n  var roundMmol = round(convertMmol, 1);\n  \n  newMsg.topic = \"RGBMmol\"                                                                               \n  newMsg.payload = \"{\\\"RGBMmol\\\":\" + roundMmol + \"}\";\n  return newMsg;   \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":710,"y":2100,"wires":[["df94400.1a4bec"]]},{"id":"db8b1809.adc8a8","type":"rpi-gpio out","z":"5203fa5f.0fe304","name":"TopRight-Light Chamber Light","pin":"31","set":true,"level":"0","freq":"","out":"out","x":1070,"y":360,"wires":[]},{"id":"2c5c9ac3.898d26","type":"rpi-gpio out","z":"5203fa5f.0fe304","name":"","pin":"35","set":true,"level":"0","freq":"","out":"out","x":1020,"y":220,"wires":[]},{"id":"cf7bb87a.0832b8","type":"rpi-gpio out","z":"5203fa5f.0fe304","name":"","pin":"37","set":true,"level":"0","freq":"","out":"out","x":1020,"y":140,"wires":[]},{"id":"65e2010e.24c22","type":"rpi-gpio out","z":"5203fa5f.0fe304","name":"","pin":"33","set":true,"level":"0","freq":"","out":"out","x":1020,"y":180,"wires":[]},{"id":"7f7e15b.d4230ec","type":"inject","z":"5203fa5f.0fe304","name":"","repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":690,"y":360,"wires":[["db8b1809.adc8a8"]]},{"id":"e72ce50a.8b3bb8","type":"inject","z":"5203fa5f.0fe304","name":"","repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"0","payloadType":"num","x":810,"y":260,"wires":[["db8b1809.adc8a8","2c5c9ac3.898d26","65e2010e.24c22","cf7bb87a.0832b8"]]},{"id":"5181e5c.0b7dd1c","type":"comment","z":"5203fa5f.0fe304","name":"Diya","info":"","x":1150,"y":260,"wires":[]},{"id":"6e0f59af.37e978","type":"inject","z":"5203fa5f.0fe304","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":710,"y":220,"wires":[["2c5c9ac3.898d26"]]},{"id":"390a36a5.017f4a","type":"comment","z":"5203fa5f.0fe304","name":"Dimmer Light","info":"","x":1170,"y":220,"wires":[]},{"id":"20b347ba.74ee08","type":"function","z":"5464091f.991b38","name":"InsertCombinedSenors","func":"  var date = msg.payload.date;\n  var time = msg.payload.time;\n  var mmols = msg.payload.mmol;\n  \n  var ColorTemp = msg.payload.ColorTemp;\n  var Lux = msg.payload.Lux;\n  var Red = msg.payload.Red;\n  var Green = msg.payload.Green;\n  var Blue = msg.payload.Blue;\n  var White = msg.payload.White;\n  \n  \n                                                                                            \n  var newMsg ={};\n  newMsg.topic = \"INSERT INTO fullSensor(Date,Time,mmols,ColorTemp,Lux,Red,Green,Blue,White) VALUES(\\'\"+ date + \" \\', \\'\" + time + \"\\', \\'\" + mmols + \"\\', \" + ColorTemp + \", \" + Lux + \", \" + Red + \", \" + Green +\", \" + Blue + \", \"+ White + \")\";\n  //newMsg.topic= \"INSERT INTO \\`lightsensor\\` (\\`lightsensorID\\`, \\`Date\\`, \\`Time\\`, \\`ColorTemp\\`, \\`Lux\\`, \\`Red\\`, \\`Green\\`, \\`Blue\\`, \\`White\\`) VALUES (NULL, \\'2020-10-01\\', \\'11:33:30\\', \\'52\\', \\'25\\', \\'52\\', \\'25\\', \\'52\\', \\'25\\');\";\n   \n  return newMsg;   \n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":380,"y":1680,"wires":[[]]},{"id":"fb0524c1.4c3168","type":"debug","z":"5464091f.991b38","name":"Before","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":450,"y":640,"wires":[]},{"id":"32b6e116.c1312e","type":"change","z":"5464091f.991b38","name":"","rules":[{"t":"set","p":"SuperSetMmols","pt":"flow","to":"200","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":170,"y":380,"wires":[[]]},{"id":"e03417e9.dfb048","type":"inject","z":"5464091f.991b38","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":120,"y":340,"wires":[["32b6e116.c1312e"]]},{"id":"6909f83.54e3508","type":"comment","z":"5464091f.991b38","name":"pwm global variables","info":"This is will set the PWM to zero in the \nflow.get(\"pwm\");\n\nEvery time the time stamp is injected it will set a global variable that is accessible \nthrough the \nflow.get(\"pwm\");\n\nand writable through the \nflow.set(\"pwm\", value to set it to);\n\nThis is also the temporary place for setting the mmol threshold it is done in the SuperSetMmols\n\nusing the same commands ","x":140,"y":300,"wires":[]},{"id":"e65fbbe7.882e98","type":"function","z":"5464091f.991b38","name":"RGBWToMmol-10K","func":"  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n  \n  var Red = msg.payload.Red * 1;\n  var Green = msg.payload.Green * 1;\n  var Blue = msg.payload.Blue * 1;\n  var White = msg.payload.White * 1;\n\n\n//From 10000 observations mostly Dark\nvar alpha = 0.109;\nvar redCo = -0.0015;\nvar greenCo = 0.0018;\nvar blueCo = 0.0043;\nvar whiteCo = 0.0005;\n  \n  var newMsg ={}; \n  var convertMmol = alpha-Red*redCo+Green*greenCo+Blue*blueCo+White*whiteCo;\n  var roundMmol = round(convertMmol, 1);\n  \n  newMsg.topic = \"WRGBMmol10k\"                                                                                \n  newMsg.payload = \"{\\\"WRGBMmol10k\\\":\"+ roundMmol + \"}\";\n  return newMsg;   \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":730,"y":2180,"wires":[["df94400.1a4bec"]]},{"id":"7dacad0f.9926c4","type":"function","z":"5464091f.991b38","name":"DimFastPWM-v2.1","func":"//obj = JSON.parse(msg.payload); //parses incoming payload to a JSON without the JSON node.\n//Then we use the object to assign to the variables below.\n//var mmols = obj.mmol;\n\nvar mmols = msg.payload.mmol;\nvar SetMmols = flow.get(\"SuperSetMmols\"); //this is the setting for the target mmols\nvar myPwm = flow.get(\"pwm\"); // This is the current setting for the pwm set inside\nlet differingMmols = 0;\n\nif (mmols>SetMmols)\n{ //if the current mmols are brighter than our setting\n    differingMmols = mmols - SetMmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm + Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else //This is the normal minor adjustments.\n        {\n          myPwm = myPwm + 1; //if not then add one to the pwm\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm>=255) //Then test to make no number greater than 255 is sent\n        {\n          myPwm = 255; //If the number is larger it will send 255\n          flow.set(\"pwm\", myPwm);\n        }\n}\n//if (mmols<SetMmols){\nelse{  // if the current mmols are dimmer than the setting\n    differingMmols = SetMmols - mmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm - Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else{\n          myPwm = myPwm - 1;\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm<=0)\n        {\n          myPwm = 0;\n          flow.set(\"pwm\", myPwm);\n        }\n}\n\nvar newMsg = {};\nvar newMsg2 = {}; // This is the object to write the PWM setting to the DB\nnewMsg.payload = myPwm;\n//Line below is for testing the output of the node\n//newMsg.payload = \"{\\\"pwm\\\":\"+ myPwm + \",\\\"SuperMmols\\\":\" + SetMmols + \",\\\"InMols\\\":\" + mmols +\"}\";\n//This object is the 2nd output of the node and goes to the function that writes to the DB\nnewMsg2.payload = \"{\\\"PWM\\\":\"+ myPwm +\"}\";\n\nreturn [newMsg, newMsg2];\n","outputs":2,"noerr":0,"initialize":"","finalize":"","x":450,"y":580,"wires":[["99147176.56b4e"],["62be4e3c.76888"]]},{"id":"99147176.56b4e","type":"serial out","z":"5464091f.991b38","name":"","serial":"8ff68355.e84b3","x":600,"y":500,"wires":[]},{"id":"62be4e3c.76888","type":"json","z":"5464091f.991b38","name":"json","property":"payload","action":"","pretty":true,"x":630,"y":580,"wires":[[]]},{"id":"4d29afbd.c70f8","type":"function","z":"5464091f.991b38","name":"DimFastPWM-v2","func":"//obj = JSON.parse(msg.payload); //parses incoming payload to a JSON without the JSON node.\n//Then we use the object to assign to the variables below.\n//var mmols = obj.mmol;\n\nvar mmols = msg.payload.mmol;\nvar SetMmols = flow.get(\"SuperSetMmols\"); //this is the setting for the target mmols\nvar myPwm = flow.get(\"pwm\"); // This is the current setting for the pwm set inside\nlet differingMmols = 0;\n\nif (mmols>SetMmols)\n{ //if the current mmols are brighter than our setting\n    differingMmols = mmols - SetMmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm + Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else //This is the normal minor adjustments.\n        {\n          myPwm = myPwm + 1; //if not then add one to the pwm\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm>=255) //Then test to make no number greater than 255 is sent\n        {\n          myPwm = 255; //If the number is larger it will send 255\n          flow.set(\"pwm\", myPwm);\n        }\n}\n//if (mmols<SetMmols){\nelse{  // if the current mmols are dimmer than the setting\n    differingMmols = SetMmols - mmols;\n    if(differingMmols>10) //this will adjust faster\n        {// It will take every 3 pwm = 1 mmol and give a quick  adjust\n          myPwm = myPwm - Math.round(differingMmols * .33);\n          flow.set(\"pwm\", myPwm);\n        }\n    else{\n          myPwm = myPwm - 1;\n          flow.set(\"pwm\", myPwm);\n        }\n    if (myPwm<=0)\n        {\n          myPwm = 0;\n          flow.set(\"pwm\", myPwm);\n        }\n}\n\nvar newMsg = {};\nnewMsg.payload = myPwm;\n//Line below is for testing the output of the node\n//newMsg.payload = \"{\\\"pwm\\\":\"+ myPwm + \",\\\"SuperMmols\\\":\" + SetMmols + \",\\\"InMols\\\":\" + mmols +\"}\";\n\nreturn newMsg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":630,"y":1600,"wires":[[]]},{"id":"bfc45d8b.2b1e2","type":"comment","z":"5464091f.991b38","name":"Data Transformation Functions","info":"DimFast v2 vs 2.1 \n2.1 has an extra output for a JSON object of the PWM setting. ","x":630,"y":1560,"wires":[]},{"id":"2df72491.fc1cfc","type":"function","z":"5464091f.991b38","name":"Random SuperSetMmols","func":"\n\nlet RandoMmols = Math.floor(Math.random() * 250) + 1;\nflow.set(\"SuperSetMmols\",RandoMmols);\nvar newMsg = {};\nnewMsg.payload = flow.get(\"SuperSetMmols\");\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":890,"y":1600,"wires":[[]]},{"id":"b55a8b52.07ac78","type":"function","z":"5464091f.991b38","name":"Every SuperSetMmols","func":"\nlet DecreasingMmols = flow.get(\"SuperSetMmols\");\nNewDecreasingMmols = DecreasingMmols - 10;\nflow.set(\"SuperSetMmols\",NewDecreasingMmols);\nvar newMsg = {};\nnewMsg.payload = flow.get(\"SuperSetMmols\");\nreturn newMsg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":880,"y":1640,"wires":[[]]},{"id":"696aa796.9146e8","type":"comment","z":"5464091f.991b38","name":"Testing Functions","info":"Both of these tests need to have a timer inject node placed in front of them. \n\nEvery SuperSet \n\nThis will incrementally reduce the mmols by 10  \n\nRandom SuperSet\n\nThis will produce a random number for the mmol setting","x":860,"y":1560,"wires":[]},{"id":"97e3e1d5.58ca4","type":"function","z":"5464091f.991b38","name":"RGBWToMmol-70K","func":"  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n  \n  var Red = msg.payload.Red * 1;\n  var Green = msg.payload.Green * 1;\n  var Blue = msg.payload.Blue * 1;\n  var White = msg.payload.White * 1;\n\n\n//From 10000 observations mostly Dark\nvar alpha = -1.440;\nvar redCo = 0.003;\nvar greenCo = -0.005;\nvar blueCo = 0.005;\nvar whiteCo = 0.002;\n  \n  var newMsg ={}; \nvar convertMmol = alpha-Red*redCo+Green*greenCo+Blue*blueCo+White*whiteCo;\n // var convertMmol = alpha-(Red*redCo)+(Green*greenCo)+(Blue*blueCo)+(White*whiteCo);\n  var roundMmol = round(convertMmol, 1);\n  \n  newMsg.topic = \"WRGBMmol70k\"                                                                                \n  newMsg.payload = \"{\\\"WRGBMmol70k\\\":\"+ roundMmol + \"}\";\n  return newMsg;   \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":730,"y":2060,"wires":[["df94400.1a4bec"]]},{"id":"e0aa545b.ce1618","type":"function","z":"5464091f.991b38","name":"RGBWToMmol-10K-Mapped","func":"  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n    \n  \n  \n  var Red = msg.payload.Red * 1;\n  var Green = msg.payload.Green * 1;\n  var Blue = msg.payload.Blue * 1;\n  var White = msg.payload.White * 1;\n\n\n//From 10000 observations mostly Dark\nvar alpha = 0.109;\nvar redCo = -0.0015;\nvar greenCo = 0.0018;\nvar blueCo = 0.0043;\nvar whiteCo = 0.0005;\n  \n  var newMsg ={}; \n  var convertMmol = alpha-Red*redCo+Green*greenCo+Blue*blueCo+White*whiteCo;\n  var roundMmol = round(convertMmol, 1);\n  \n  newMsg.topic = \"WRGBMmol10k\"                                                                                \n  newMsg.payload = \"{\\\"WRGBMmol10k\\\":\"+ roundMmol + \"}\";\n  return newMsg;   \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":760,"y":2220,"wires":[[]]},{"id":"e2ab87cf.1f61b8","type":"function","z":"5464091f.991b38","name":"RGBMmols-70k","func":"  function round(value, decimals) {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    }\n  \n  var Red = msg.payload.Red * 1;\n  var Green = msg.payload.Green * 1;\n  var Blue = msg.payload.Blue * 1;\n // var White = msg.payload.White * 1;\n  \n  //Done with 71000 observations\n  var alpha = 0.8304;\n  var redCo = 0.0108;\n  var greenCo = 0.016;\n  var blueCo = -0.022\n  //var whiteCo = 0.0005;\n  \n  var newMsg ={}; \n  var convertMmol = alpha-Red*redCo+Green*greenCo+Blue*blueCo;\n  var roundMmol = round(convertMmol, 1);\n  \n  newMsg.topic = \"RGBMmol\"                                                                               \n  newMsg.payload = \"{\\\"RGBMmol\\\":\" + roundMmol + \"}\";\n  return newMsg;   \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":720,"y":2020,"wires":[[]]},{"id":"7eb229b4.bc0348","type":"mqtt out","z":"5464091f.991b38","name":"","topic":"AdafruitRaw","qos":"","retain":"false","broker":"32c79d39.858102","x":150,"y":1441,"wires":[]},{"id":"1e7c9556.7cb9fb","type":"comment","z":"5464091f.991b38","name":"Pin for Dim","info":"Connect these 2 nodes to connect the dimmer\n","x":600,"y":460,"wires":[]},{"id":"97da7681.fc5e88","type":"mqtt out","z":"5464091f.991b38","name":"","topic":"Altogether","qos":"","retain":"false","broker":"32c79d39.858102","x":1110,"y":560,"wires":[]},{"id":"ab325fba.3d365","type":"json","z":"5464091f.991b38","name":"","property":"payload","action":"","pretty":false,"x":290,"y":780,"wires":[["f49e2753.db0458","78d5dc76.46431c","1afac4d9.ef285b","167ab16e.2ce2af","c83c83ae.364c5","c749e54e.9f2278","a4c501c1.ffec2"]]},{"id":"a45146cc.76b3b8","type":"comment","z":"5464091f.991b38","name":"Input from SparkfunSpectral","info":"# Input Section\n\nThis is the input from both the Arduino and the MQTT server\n\nMQTT information to connect to server running on Asus Stick is \nUsername: testnode\nPassword: admin","x":140,"y":740,"wires":[]},{"id":"3a7a77b3.c89248","type":"comment","z":"5464091f.991b38","name":"TCS34725 Defunct Conversion","info":"These nodes were used with the Adafruit TCS34725 sensor to try and convert the different colors of light to predict the mmols. They were wildly off. \n\n\nThe only one that was remotely close was the RGBWToMmol-10K node. The others didn't work at all. \n\nThey were all created using PLS and then the derived coefficients were used to predict the equvilency. \n\nI have kept it here in case I want to bring it back. If I bring it back I will not connect it through an arduino I'll set up the photon and connect that way...It will end the USB shanananigans ","x":750,"y":1980,"wires":[]},{"id":"cea542c6.1712c","type":"comment","z":"5464091f.991b38","name":"Input from TCS34725 sensors","info":"# Input Section\n\nThis is the input from both the Arduino and the MQTT server\n\nMQTT information to connect to server running on Asus Stick is \nUsername: testnode\nPassword: admin","x":400,"y":2080,"wires":[]},{"id":"f49e2753.db0458","type":"function","z":"5464091f.991b38","name":"ConvertMmol-AS7625X","func":"function round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n\n//Coefficients from the linear regression model\n  let alpha=-1.101;\n  let $705nmCo=0.602;\n  let $535nmCo=-0.385;\n  let $510nmCo=0.384;\n  let $940nmCo=-2.785;\n  let $860nmCo=0.77;\n  let $560nmCo=0.472;\n  let $460nmCo=-0.146;\n  let $410nmCo=0.647;\n  let $760nmCo=-0.737;\n  let $645nmCo=-0.182;\n  let $585nmCo=-0.282;\n  let $485nmCo=0.074;\n  let $730nmCo=-0.093;\n  let $810nmCo=0.542;\n  let $610nmCo=0.067;\n  let $435nmCo=-0.044;\n  let $680nmCo =0.003;\n  let $900nmCo=0.091;\n\n//Data coming from sensor\nlet $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\nlet $730nm=msg.payload[\"730nm\"];\nlet $760nm=msg.payload[\"760nm\"];\nlet $810nm=msg.payload[\"810nm\"];\nlet $860nm=msg.payload[\"860nm\"];\nlet $900nm=msg.payload[\"900nm\"];\nlet $940nm=msg.payload[\"940nm\"];\n\n/* Not sure if I need this, it makes all of them float data types.\n$410nm=$410nm*1;\n$435nm=$435nm*1;\n$460nm=$460nm*1;\n$485nm=$485nm*1;\n$510nm=$510nm*1;\n$535nm=$535nm*1;\n$560nm=$560nm*1;\n$585nm=$585nm*1;\n$610nm=$610nm*1;\n$645nm=$645nm*1;\n$680nm=$680nm*1;\n$705nm=$705nm*1;\n$730nm=$730nm*1;\n$760nm=$760nm*1;\n$810nm=$810nm*1;\n$860nm=$860nm*1;\n$900nm=$900nm*1;\n$940nm=$940nm*1;\n*/\n\n//Y = A + BX linear regression equation below. \n//All of them\nvar convertMmol = alpha+($705nmCo*$705nm)+($535nmCo*$535nm)+($510nmCo*$510nm)+($940nmCo*$940nm)+($860nmCo*$860nm)+($560nmCo*$560nm)+($460nmCo*$460nm)+($410nmCo*$410nm)+($760nmCo*$760nm)+($645nmCo*$645nm)+($585nmCo*$585nm)+($485nmCo*$485nm)+($730nmCo*$730nm)+($810nmCo*$810nm)+($610nmCo*$610nm)+($435nmCo*$435nm)+($680nmCo*$680nm)+($900nmCo*$900nm);\n\nvar roundMmol = round(convertMmol, 1);\n\nvar newMsg ={};\nnewMsg.topic = \"predictedMmol\"\nnewMsg.payload = {predictedMmol:roundMmol};\nreturn newMsg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":495,"y":1414,"wires":[[]]},{"id":"5fca15a0.d3b57c","type":"function","z":"5464091f.991b38","name":"InsertCombinedSensorPWM","func":"var date = msg.payload.date;\nvar time = msg.payload.time;\nvar mmols = msg.payload.mmol;\nvar WRGBMmols = msg.payload.WRGBMmol;\nvar RGBMmols = msg.payload.RGBMmol;\nvar WRGBMmols10K = msg.payload.WRGBMmol10k;\nvar WRGBMmol70k = msg.payload.WRGBMmol70k;\nvar PWM = msg.payload.PWM;\n                                                                                             \n\nvar newMsg ={};                                                                           \nnewMsg.topic = \"INSERT INTO calibrateTablePWM(Date,Time,mmols,WRGBMmols,RGBMmols,WRGBMmols10K,PWM,WRGBMmol70k)  VALUES(\\'\"+ date + \" \\', \\' \" + time + \"\\', \\'\" + mmols + \"\\', \" + WRGBMmols + \", \" + RGBMmols + \", \"+ WRGBMmols10K + \", \"+ PWM +\", \" + WRGBMmol70k + \")\";\n  \nreturn newMsg; \n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":400,"y":1720,"wires":[[]]},{"id":"d9d8133c.34542","type":"function","z":"5464091f.991b38","name":"InsertCombinedSenors","func":"  var date = msg.payload.date;\n  var time = msg.payload.time;\n  var mmols = msg.payload.mmol;\n  \n  var ColorTemp = msg.payload.ColorTemp;\n  var Lux = msg.payload.Lux;\n  var Red = msg.payload.Red;\n  var Green = msg.payload.Green;\n  var Blue = msg.payload.Blue;\n  var White = msg.payload.White;\n  \n  \n                                                                                            \n  var newMsg ={};\n  \n  var msgTest = {};\n  var testString = \"INSERT INTO fullSensor(Date,Time,mmols,ColorTemp,Lux,Red,Green,Blue,White) VALUES(\\'\"+ date + \"\\', \\'\" + time + \"\\', \\'\" + mmols + \"\\', \" + ColorTemp + \", \" + Lux + \", \" + Red + \", \" + Green +\", \" + Blue + \", \"+ White + \")\";\n  msgTest.topic = testString;\n \n  \n  //newMsg.topic = \"INSERT INTO fullSensor(Date,Time,mmols,ColorTemp,Lux,Red,Green,Blue,White) VALUES(\\'\"+ date + \" \\', \\'\" + time + \"\\', \\'\" + mmols + \"\\', \" + ColorTemp + \", \" + Lux + \", \" + Red + \", \" + Green +\", \" + Blue + \", \"+ White + \")\";\n  //newMsg.topic= \"INSERT INTO \\`lightsensor\\` (\\`lightsensorID\\`, \\`Date\\`, \\`Time\\`, \\`ColorTemp\\`, \\`Lux\\`, \\`Red\\`, \\`Green\\`, \\`Blue\\`, \\`White\\`) VALUES (NULL, \\'2020-10-01\\', \\'11:33:30\\', \\'52\\', \\'25\\', \\'52\\', \\'25\\', \\'52\\', \\'25\\');\";\n   \n  //return newMsg;   \n \n  return msgTest; ","outputs":1,"noerr":0,"initialize":"","finalize":"","x":380,"y":1760,"wires":[[]]},{"id":"e2ee06ca.1598c8","type":"mysql","z":"5464091f.991b38","mydb":"7f74a926.884158","name":"","x":840,"y":1720,"wires":[[]]},{"id":"e2b486b.2c55278","type":"comment","z":"5464091f.991b38","name":"This is the node that connects to the SQL database","info":"","x":970,"y":1680,"wires":[]},{"id":"41b7d9f5.b5db18","type":"comment","z":"5464091f.991b38","name":"Input from Apoge 520 via Mqtt","info":"","x":140,"y":620,"wires":[]},{"id":"3123b738.53e8d8","type":"eztimer","z":"5203fa5f.0fe304","name":"timer","debug":false,"autoname":"23:59 + 18:00","tag":"eztimer","suspended":false,"sendEventsOnSuspend":false,"latLongSource":"manual","latLongHaZone":"zone.home","lat":"","lon":"","timerType":"1","startupMessage":true,"ontype":"2","ontimesun":"dawn","ontimetod":"23:59","onpropertytype":"msg","onproperty":"payload","onvaluetype":"num","onvalue":1,"onoffset":0,"onrandomoffset":0,"onsuppressrepeats":false,"offtype":"3","offtimesun":"dusk","offtimetod":"20:01","offduration":"18:00","offpropertytype":"msg","offproperty":"payload","offvaluetype":"num","offvalue":0,"offoffset":0,"offrandomoffset":0,"offsuppressrepeats":false,"resend":false,"resendInterval":"0s","mon":true,"tue":true,"wed":true,"thu":true,"fri":true,"sat":true,"sun":true,"x":690,"y":420,"wires":[["db8b1809.adc8a8"]]},{"id":"6fcd45f3.7cf8bc","type":"debug","z":"5464091f.991b38","name":"Test1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":830,"y":1440,"wires":[]},{"id":"78d5dc76.46431c","type":"function","z":"5464091f.991b38","name":"ConvertMmols&Rgres-windowSun-to705","func":"function round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n \n//Coefficients from the linear regression model\nvar alpha=-0.353;\nvar $410nmCo=0.145;\nvar $435nmCo=-0.003;\nvar $460nmCo=-0.002;\nvar $485nmCo=0.029;\nvar $510nmCo=0;\nvar $535nmCo=0.001;\nvar $560nmCo=-0.075;\nvar $585nmCo=0.124;\nvar $610nmCo=0.075;\nvar $645nmCo=-0.231;\nvar $680nmCo=0.005;\nvar $705nmCo=-0.009;\n\n//\n \n//Data coming from sensor\nlet $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\n\n\n \n\n//Y = A + BX linear regression equation below. \n//All of them\nvar convertMmol = alpha                \n                +($410nmCo*$410nm)\n                +($435nmCo*$435nm)\n                +($460nmCo*$460nm)\n                +($485nmCo*$485nm)\n                +($510nmCo*$510nm)\n                +($535nmCo*$535nm)\n                +($560nmCo*$560nm)\n                +($585nmCo*$585nm)\n                +($610nmCo*$610nm)\n                +($645nmCo*$645nm)\n                +($680nmCo*$680nm)\n                +($705nmCo*$705nm);\n\nvar roundMmol = round(convertMmol, 1);\n \nvar newMsg ={};\nnewMsg.topic = \"predictedMmol\"\nnewMsg.payload = {predictedMmol:roundMmol};\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":544,"y":1447,"wires":[["bebe8212.57863"]]},{"id":"1afac4d9.ef285b","type":"function","z":"5464091f.991b38","name":"ConvertMmols&Rgres-windowSun","func":"function round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n \n//Coefficients from the linear regression model\nvar alpha=0.925;\nvar $410nmCo=0.521;\nvar $435nmCo=-0.056;\nvar $460nmCo=-0.007;\nvar $485nmCo=-0.125;\nvar $510nmCo=0.023;\nvar $535nmCo=0.038;\nvar $560nmCo=0.065;\nvar $585nmCo=-0.187;\nvar $610nmCo=0.135;\nvar $645nmCo=-0.209;\nvar $680nmCo=0;\nvar $705nmCo=-0.052;\nvar $730nmCo=-0.035;\nvar $760nmCo=0.039;\nvar $810nmCo=0.074;\nvar $860nmCo=-0.05;\nvar $900nmCo=0.074;\nvar $940nmCo=-0.128;\n\n \n//Data coming from sensor\nlet $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\nlet $730nm=msg.payload[\"730nm\"];\nlet $760nm=msg.payload[\"760nm\"];\nlet $810nm=msg.payload[\"810nm\"];\nlet $860nm=msg.payload[\"860nm\"];\nlet $900nm=msg.payload[\"900nm\"];\nlet $940nm=msg.payload[\"940nm\"];\n\n \n/* Not sure if I need this, it makes all of them float data types.\n$410nm=$410nm*1;\n$435nm=$435nm*1;\n$460nm=$460nm*1;\n$485nm=$485nm*1;\n$510nm=$510nm*1;\n$535nm=$535nm*1;\n$560nm=$560nm*1;\n$585nm=$585nm*1;\n$610nm=$610nm*1;\n$645nm=$645nm*1;\n$680nm=$680nm*1;\n$705nm=$705nm*1;\n$730nm=$730nm*1;\n$760nm=$760nm*1;\n$810nm=$810nm*1;\n$860nm=$860nm*1;\n$900nm=$900nm*1;\n$940nm=$940nm*1;\n*/\n \n//Y = A + BX linear regression equation below. \n//All of them\nvar convertMmol = alpha                \n                +($410nmCo*$410nm)\n                +($435nmCo*$435nm)\n                +($460nmCo*$460nm)\n                +($485nmCo*$485nm)\n                +($510nmCo*$510nm)\n                +($535nmCo*$535nm)\n                +($560nmCo*$560nm)\n                +($585nmCo*$585nm)\n                +($610nmCo*$610nm)\n                +($645nmCo*$645nm)\n                +($680nmCo*$680nm)\n                +($705nmCo*$705nm)\n                +($730nmCo*$730nm)\n                +($760nmCo*$760nm)\n                +($810nmCo*$810nm)\n                +($860nmCo*$860nm)\n                +($900nmCo*$900nm)\n                +($940nmCo*$940nm);\n\nvar roundMmol = round(convertMmol, 1);\n \nvar newMsg ={};\nnewMsg.topic = \"predictedMmol\"\nnewMsg.payload = {predictedMmol:roundMmol};\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":524,"y":1480,"wires":[["6fcd45f3.7cf8bc"]]},{"id":"bebe8212.57863","type":"debug","z":"5464091f.991b38","name":"Test 2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":830,"y":1400,"wires":[]},{"id":"167ab16e.2ce2af","type":"function","z":"5464091f.991b38","name":"ConvertMmols&Rgres-windowSun-to705-aftermoving","func":"function round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n \n//Coefficients from the linear regression model\nvar alpha=0.193;\nvar $410nmCo=0.195;\nvar $435nmCo=-0.201;\nvar $460nmCo=0.202;\nvar $485nmCo=0.039;\nvar $510nmCo=-0.02;\nvar $535nmCo=-0.126;\nvar $560nmCo=-0.07;\nvar $585nmCo=0.133;\nvar $610nmCo=0.029;\nvar $645nmCo=-0.025;\nvar $680nmCo=-0.001;\nvar $705nmCo=-0.11;\n\n\n//\n \n//Data coming from sensor\nlet $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\n\n\n \n\n//Y = A + BX linear regression equation below. \n//All of them\nvar convertMmol = alpha                \n                +($410nmCo*$410nm)\n                +($435nmCo*$435nm)\n                +($460nmCo*$460nm)\n                +($485nmCo*$485nm)\n                +($510nmCo*$510nm)\n                +($535nmCo*$535nm)\n                +($560nmCo*$560nm)\n                +($585nmCo*$585nm)\n                +($610nmCo*$610nm)\n                +($645nmCo*$645nm)\n                +($680nmCo*$680nm)\n                +($705nmCo*$705nm);\n\nvar roundMmol = round(convertMmol, 1);\n \nvar newMsg ={};\nnewMsg.topic = \"predictedMmol\"\nnewMsg.payload = {predictedMmol:roundMmol};\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":584,"y":1380,"wires":[[]]},{"id":"c01808ea.ffbef8","type":"serial in","z":"5464091f.991b38","name":"Sun Side AS7265x","serial":"a0e240f7.406c6","x":110,"y":780,"wires":[["ab325fba.3d365"]]},{"id":"88f97764.b6c0b8","type":"debug","z":"5464091f.991b38","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1230,"y":1420,"wires":[]},{"id":"3a99e599.c4640a","type":"eztimer","z":"5203fa5f.0fe304","name":"","debug":false,"autoname":"21:43 + 00:20:","tag":"eztimer","suspended":false,"sendEventsOnSuspend":false,"latLongSource":"manual","latLongHaZone":"zone.home","lat":"","lon":"","timerType":"1","startupMessage":true,"ontype":"2","ontimesun":"dawn","ontimetod":"21:43","onpropertytype":"msg","onproperty":"payload","onvaluetype":"num","onvalue":1,"onoffset":0,"onrandomoffset":0,"onsuppressrepeats":false,"offtype":"3","offtimesun":"dusk","offtimetod":"dusk","offduration":"00:20:","offpropertytype":"msg","offproperty":"payload","offvaluetype":"num","offvalue":0,"offoffset":0,"offrandomoffset":0,"offsuppressrepeats":false,"resend":false,"resendInterval":"0s","mon":true,"tue":true,"wed":true,"thu":true,"fri":true,"sat":true,"sun":true,"x":140,"y":40,"wires":[["f155a9ef.4c24a8"]]},{"id":"32d9999f.527996","type":"inject","z":"5203fa5f.0fe304","name":"","repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":710,"y":180,"wires":[["65e2010e.24c22"]]},{"id":"24435adb.353766","type":"inject","z":"5203fa5f.0fe304","name":"","repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":710,"y":140,"wires":[["cf7bb87a.0832b8"]]},{"id":"205c4345.c6c10c","type":"influxdb out","z":"5464091f.991b38","influxdb":"97a92bcb.f6c9a8","name":"Sun Side-S-to-M","measurement":"SunSideSpectralMmol","precision":"","retentionPolicy":"","database":"database","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"","org":"organisation","bucket":"bucket","x":1070,"y":680,"wires":[]},{"id":"2ddf4582.fed02a","type":"comment","z":"5464091f.991b38","name":"Cut unitl we use the dimming in next experiment","info":"","x":520,"y":580,"wires":[]},{"id":"de1cc8d4.e3cba8","type":"function","z":"5464091f.991b38","name":"SpectralFloatConvert","func":"let $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\nlet $730nm=msg.payload[\"730nm\"];\nlet $760nm=msg.payload[\"760nm\"];\nlet $810nm=msg.payload[\"810nm\"];\nlet $860nm=msg.payload[\"860nm\"];\nlet $900nm=msg.payload[\"900nm\"];\nlet $940nm=msg.payload[\"940nm\"];\nlet $date=msg.payload[\"date\"];\nlet $time=msg.payload[\"time\"];\nlet $mmol=msg.payload[\"mmol\"];\n\n$410nm=$410nm*1;\n$435nm=$435nm*1;\n$460nm=$460nm*1;\n$485nm=$485nm*1;\n$510nm=$510nm*1;\n$535nm=$535nm*1;\n$560nm=$560nm*1;\n$585nm=$585nm*1;\n$610nm=$610nm*1;\n$645nm=$645nm*1;\n$680nm=$680nm*1;\n$705nm=$705nm*1;\n$730nm=$730nm*1;\n$760nm=$760nm*1;\n$810nm=$810nm*1;\n$860nm=$860nm*1;\n$900nm=$900nm*1;\n$940nm=$940nm*1;\n\n\n\nvar newMsg={};\nnewMsg.payload = {\n                nm410:$410nm,\n                nm435:$435nm,\n                nm460:$460nm,\n                nm485:$485nm,\n                nm510:$510nm,\n                nm535:$535nm,\n                nm560:$560nm,\n                nm585:$585nm,\n                nm610:$610nm,\n                nm645:$645nm,\n                nm680:$680nm,\n                nm705:$705nm,\n                nm730:$730nm,\n                nm760:$760nm,\n                nm810:$810nm,\n                nm860:$860nm,\n                nm900:$900nm,\n                nm940:$940nm,\n                mmol:$mmol,\n                //date: $date,\n                //time: $time\n                    };\n\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":800,"y":680,"wires":[["4ca0a261.db932c","205c4345.c6c10c"]]},{"id":"562d6b05.829d04","type":"comment","z":"5464091f.991b38","name":"These are examples of calibrating the AS7265x with different data sets and configurations","info":"","x":590,"y":1380,"wires":[]},{"id":"e4a999af.c5a428","type":"comment","z":"5464091f.991b38","name":"Phase 1 Comments ","info":"We will now be taking readings of sun and readings of spectral sensor....create the formula and use it in Phase 2","x":790,"y":720,"wires":[]},{"id":"a271848.43d9c78","type":"inject","z":"5203fa5f.0fe304","name":"","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":130,"y":340,"wires":[["b9807b6f.36645"]]},{"id":"188d376d.dd0139","type":"inject","z":"5203fa5f.0fe304","name":"","props":[{"p":"payload","v":"0","vt":"num"},{"p":"topic","v":"","vt":"string"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"0","payloadType":"num","x":130,"y":260,"wires":[["f155a9ef.4c24a8"]]},{"id":"c749e54e.9f2278","type":"function","z":"5464091f.991b38","name":"Sun-PreMmol-940","func":"function round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n \n//Coefficients from the linear regression model\nvar alpha=0.579;\nvar $410nmCo=-1.87;\nvar $435nmCo=1.925;\nvar $460nmCo=-0.918;\nvar $485nmCo=2.053;\nvar $510nmCo=-1.32;\nvar $535nmCo=-0.378;\nvar $560nmCo=0.528;\nvar $585nmCo=-1.984;\nvar $610nmCo=0.319;\nvar $645nmCo=0.814;\nvar $680nmCo=0.143;\nvar $705nmCo=0.987;\nvar $730nmCo=-0.943;\nvar $760nmCo=3.159;\nvar $810nmCo=-3.653;\nvar $860nmCo=0.105;\nvar $900nmCo=0.524;\nvar $940nmCo=2.234;\n\n\n//\n \n//Data coming from sensor\nlet $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\nlet $730nm=msg.payload[\"730nm\"];\nlet $760nm=msg.payload[\"760nm\"];\nlet $810nm=msg.payload[\"810nm\"];\nlet $860nm=msg.payload[\"860nm\"];\nlet $900nm=msg.payload[\"900nm\"];\nlet $940nm=msg.payload[\"940nm\"];\n\n/* Not sure if I need this, it makes all of them float data types.\n$410nm=$410nm*1;\n$435nm=$435nm*1;\n$460nm=$460nm*1;\n$485nm=$485nm*1;\n$510nm=$510nm*1;\n$535nm=$535nm*1;\n$560nm=$560nm*1;\n$585nm=$585nm*1;\n$610nm=$610nm*1;\n$645nm=$645nm*1;\n$680nm=$680nm*1;\n$705nm=$705nm*1;\n$730nm=$730nm*1;\n$760nm=$760nm*1;\n$810nm=$810nm*1;\n$860nm=$860nm*1;\n$900nm=$900nm*1;\n$940nm=$940nm*1;\n*/\n\n//Y = A + BX linear regression equation below. \n//All of them\nvar convertMmol = alpha+($705nmCo*$705nm)+($535nmCo*$535nm)+($510nmCo*$510nm)+($940nmCo*$940nm)+($860nmCo*$860nm)+($560nmCo*$560nm)+($460nmCo*$460nm)+($410nmCo*$410nm)+($760nmCo*$760nm)+($645nmCo*$645nm)+($585nmCo*$585nm)+($485nmCo*$485nm)+($730nmCo*$730nm)+($810nmCo*$810nm)+($610nmCo*$610nm)+($435nmCo*$435nm)+($680nmCo*$680nm)+($900nmCo*$900nm);\n\nvar roundMmol = round(convertMmol, 1);\n\nvar newMsg ={};\nnewMsg.topic = \"predictedMmol940\"\nnewMsg.payload = {predictedMmol940:roundMmol};\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":530,"y":860,"wires":[["277e1e31.1349d2"]]},{"id":"a4c501c1.ffec2","type":"function","z":"5464091f.991b38","name":"Sun-PreMmol-705","func":"function round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n \n//Coefficients from the linear regression model\nvar alpha=0.268;\nvar $410nmCo=-1.366;\nvar $435nmCo=1.218;\nvar $460nmCo=-0.737;\nvar $485nmCo=2.55;\nvar $510nmCo=-3.087;\nvar $535nmCo=1.126;\nvar $560nmCo=-1.203;\nvar $585nmCo=0.667;\nvar $610nmCo=-0.427;\nvar $645nmCo=0.792;\nvar $680nmCo=0.502;\nvar $705nmCo=-0.262;\n\n\n//\n \n//Data coming from sensor\nlet $410nm=msg.payload[\"410nm\"];\nlet $435nm=msg.payload[\"435nm\"];\nlet $460nm=msg.payload[\"460nm\"];\nlet $485nm=msg.payload[\"485nm\"];\nlet $510nm=msg.payload[\"510nm\"];\nlet $535nm=msg.payload[\"535nm\"];\nlet $560nm=msg.payload[\"560nm\"];\nlet $585nm=msg.payload[\"585nm\"];\nlet $610nm=msg.payload[\"610nm\"];\nlet $645nm=msg.payload[\"645nm\"];\nlet $680nm=msg.payload[\"680nm\"];\nlet $705nm=msg.payload[\"705nm\"];\n\n\n/* Not sure if I need this, it makes all of them float data types.\n$410nm=$410nm*1;\n$435nm=$435nm*1;\n$460nm=$460nm*1;\n$485nm=$485nm*1;\n$510nm=$510nm*1;\n$535nm=$535nm*1;\n$560nm=$560nm*1;\n$585nm=$585nm*1;\n$610nm=$610nm*1;\n$645nm=$645nm*1;\n$680nm=$680nm*1;\n$705nm=$705nm*1;\n$730nm=$730nm*1;\n$760nm=$760nm*1;\n$810nm=$810nm*1;\n$860nm=$860nm*1;\n$900nm=$900nm*1;\n$940nm=$940nm*1;\n*/\n\n//Y = A + BX linear regression equation below. \n//All of them\nvar convertMmol = alpha                \n                +($410nmCo*$410nm)\n                +($435nmCo*$435nm)\n                +($460nmCo*$460nm)\n                +($485nmCo*$485nm)\n                +($510nmCo*$510nm)\n                +($535nmCo*$535nm)\n                +($560nmCo*$560nm)\n                +($585nmCo*$585nm)\n                +($610nmCo*$610nm)\n                +($645nmCo*$645nm)\n                +($680nmCo*$680nm)\n                +($705nmCo*$705nm);\n\nvar roundMmol = round(convertMmol, 1);\n\nvar newMsg ={};\nnewMsg.topic = \"predictedMmol705\"\nnewMsg.payload = {predictedMmol705:roundMmol};\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":530,"y":900,"wires":[["277e1e31.1349d2"]]},{"id":"ba9bba1c.1b9178","type":"influxdb out","z":"5464091f.991b38","influxdb":"97a92bcb.f6c9a8","name":"Sun Side-P-to-M","measurement":"SunSidePredictedMmol","precision":"","retentionPolicy":"","database":"database","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"","org":"organisation","bucket":"bucket","x":1090,"y":780,"wires":[]},{"id":"277e1e31.1349d2","type":"join","z":"5464091f.991b38","name":"","mode":"custom","build":"merged","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"5","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":690,"y":780,"wires":[["5cebe1f6.bb19a"]]},{"id":"5cebe1f6.bb19a","type":"function","z":"5464091f.991b38","name":"","func":"let $date=msg.payload[\"date\"];\nlet $time=msg.payload[\"time\"];\nlet $PWM=msg.payload[\"PWM\"];\nlet $predictedMmol705=msg.payload[\"predictedMmol705\"];\nlet $predictedMmol940=msg.payload[\"predictedMmol940\"];\nlet $mmol=msg.payload[\"mmol\"];\n\n\n\nvar newMsg={};\nnewMsg.payload = {\n               // PWM:$PWM,\n                predictedMmol705:$predictedMmol705,\n                predictedMmol940:$predictedMmol940,\n                mmol:$mmol\n                //date: $date,\n                //time: $time\n                    };\n\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":840,"y":780,"wires":[["ba9bba1c.1b9178","77f9475.2bd09b8"]]},{"id":"77f9475.2bd09b8","type":"debug","z":"5464091f.991b38","name":"Yes","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":970,"y":840,"wires":[]}]